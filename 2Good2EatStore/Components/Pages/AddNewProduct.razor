@page "/AddNewProduct"
@using CloudinaryDotNet
@using CloudinaryDotNet.Actions
@using Microsoft.AspNetCore.Authorization
@using _2Good2EatStore.Data
@using _2Good2EatStore.Data.Enums
@using _2Good2EatStore.Data.Models
@rendermode InteractiveServer
@inject Cloudinary cloudinary
@attribute [Authorize]
@inject ApplicationDbContext context
@inject FileUploadUtilityService utility


<AuthorizeView Context="authContext">
<EditForm Context ="formContext" Model="@productModel">
        <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Add New Product</MudText>
        <MudGrid Spacing="6" Class="mt-16">
            <MudItem xs="7">
                <MudFileUpload T="IBrowserFile" OnFilesChanged="OnFilesChanged">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="@context.Id">
                            Upload Image
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
                @if (file != null)
                {
                    <MudItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                        @file.Name <code>@file.Size bytes</code>
                    </MudItem>

                }
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField T="string" required @bind-Value="@productModel.Name" Label="Name" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="string" required @bind-Value="@productModel.Description" Label="Description" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="decimal" required @bind-Value="@productModel.WholesalePrice" Label="Wholesale Price" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField T="decimal" required @bind-Value="@productModel.RetailPrice" Label="Retail Price" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField T="int" required @bind-Value="@productModel.Inventory" Label="Inventory" />
                    </MudItem>
                <MudItem xs="6">
                        <MudText for="body">Select type of product: </MudText>
                        <InputSelect required @bind-Value="@productModel.ProductType">
                            @foreach (var type in Enum.GetValues(typeof(ProductTypeEnum)))
                            {
                                <option value="@type">@type</option>
                            }
                        </InputSelect>
                 </MudItem>

                </MudGrid>
            </MudItem>
            <MudButton Disabled="@_processing" OnClick="Save" Variant="Variant.Filled" Color="Color.Primary">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Save</MudText>
                }
            </MudButton>
        </MudGrid>
</EditForm>

</AuthorizeView>
@code {
    private bool _processing = false;
    private ProductModel productModel = new ProductModel();
    IBrowserFile? file;
    string fileName;
    async Task Save()
    {
        _processing = true;

        var uploadParams = new ImageUploadParams()
            {
                File = new FileDescription(fileName),
                UseFilename = true,
                UniqueFilename = false,
                Overwrite = true
            };
        var uploadResult = cloudinary.Upload(uploadParams);
        productModel.ProductImageURL = uploadResult.Url.OriginalString;

        context.Products.Add(ProductModel.MapToEntity(productModel));
        await context.SaveChangesAsync();

        productModel = new ProductModel();
        file = null;
        _processing = false;

    }

    private async Task OnFilesChanged(InputFileChangeEventArgs e)
    {
       file = e.File;
       fileName = await utility.MoveFileToRoot(file);

    }
}

