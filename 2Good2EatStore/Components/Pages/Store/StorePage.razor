@page "/store"
@using _2Good2EatStore.Data
@using _2Good2EatStore.Data.Entities
@rendermode InteractiveServer
@inject ApplicationDbContext dbContext


@if (TotalProducts > 1)
{
    <MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
        <MudGrid>
            @foreach (var item in DisplayedProducts)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCardMedia Image="@item.ProductImageURL" Height="200" Width="200" />
                    <MudCard Outlined="true">
                        <MudCardContent>
                            <MudText>@item.Name</MudText>
                            <MudCardActions>

                            </MudCardActions>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    </MudContainer>

    <MudContainer MaxWidth="MaxWidth.Small">
        <MudForm>
            <MudPagination Color="Color.Primary"  Count="pageCount" @bind-Selected="@_selected" onchange="OnSelectionChange()" />
            <MudSelect T="int" Label="Items per Page" @bind-Selected="@itemPerPageCount" OnInternalInputChanged="OnSelectionChange()" >
                <MudSelectItem T="int" Value="5"></MudSelectItem>
                <MudSelectItem T="int" Value="10"></MudSelectItem>
                <MudSelectItem T="int" Value="20"></MudSelectItem>
            </MudSelect>
        </MudForm>
    </MudContainer>

}


@code {

    private static int _selected = 1;
    private int itemPerPageCount = 10;
    private int pageCount;
    private int TotalProducts;
    private List<Product> DisplayedProducts;

    protected async override Task OnInitializedAsync()
    {
        TotalProducts = dbContext.Products.Where(x => !x.isDeleted && x.isVisible).Count();
        pageCount = TotalProducts / itemPerPageCount;
        GetDisplayedProducts();
    }

    private void GetDisplayedProducts()
    {
        int skipCount = (_selected - 1) * itemPerPageCount;
        DisplayedProducts =  dbContext.Products.Skip(skipCount).Take(itemPerPageCount).ToList();
    }


    private EventCallback OnSelectionChange()
    {
        GetDisplayedProducts();
        return EventCallback.Empty;
    }   

}
