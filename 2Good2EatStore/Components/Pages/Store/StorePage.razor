@page "/"
@using _2Good2EatStore.Data
@using _2Good2EatStore.Data.Entities
@using Microsoft.EntityFrameworkCore;
@using _2Good2EatStore.Data.Interfaces
@using _2Good2EatStore.Data.Services
@rendermode InteractiveServer
@inject IProductService productService

    <MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.Large">
@if (TotalProducts > 0)
{

        <MudGrid>
            @foreach (var item in DisplayedProducts)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCardMedia Image="@item.ProductImageURL" Height="200" Width="200" />
                    <MudCard Outlined="true">
                        <MudCardContent>
                            <MudText>@item.Name</MudText>
                            <MudCardActions>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" Href="">Learn More</MudButton>
                                <AuthorizeView>
                                    <MudButton Href="@($"AddEditNewProduct/{item.Id}")"  Variant="Variant.Text" Color="Color.Primary">Edit</MudButton>
                                 </AuthorizeView>
                            </MudCardActions>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>

} 
else
{
    <MudText>Sorry no products are available!</MudText>
}

    <MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="navbits">
        <MudForm>
            <MudPagination Color="Color.Primary"  Count="pageCount" SelectedChanged="OnSelectionChange"  />
            <MudSelect T="int" Label="Items per Page" @bind-Value="@itemPerPageCount" >
                <MudSelectItem T="int" Value="5"></MudSelectItem>
                <MudSelectItem T="int" Value="10"></MudSelectItem>
                <MudSelectItem T="int" Value="20"></MudSelectItem>
            </MudSelect>
        </MudForm>
    </MudContainer>
</MudContainer>


@code {

    private int _selected = 1;
    private int itemPerPageCount = 10;
    private int pageCount;
    private int TotalProducts;
    private List<Product>? DisplayedProducts;

    protected async override Task OnInitializedAsync()
    {
        TotalProducts = productService.GetProducts().Where(x => !x.IsDeleted && x.IsVisible).Count();
        CalcPageCount();
        GetDisplayedProducts();
    }

    private void GetDisplayedProducts()
    {
        DisplayedProducts = productService.GetProducts().Skip(CalcSkip()).Take(itemPerPageCount).ToList();
    }


    private void OnSelectionChange(int i)
    {
        _selected = i;
        GetDisplayedProducts();
    }   

    private void CalcPageCount()
    {
        pageCount = (int)Math.Round((decimal)TotalProducts/ itemPerPageCount);
    }

    private int CalcSkip()
    {
        return (_selected - 1) * itemPerPageCount;
    }
}

